// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using task.api.Models;

namespace task.api.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("task.shared.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ReservationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("task.shared.AppointmentSpecialist", b =>
                {
                    b.Property<int>("AppointmentSpecialistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentSpecialistId");

                    b.ToTable("AppointmentSpecialists");
                });

            modelBuilder.Entity("task.shared.AvailableTimePeriod", b =>
                {
                    b.Property<int>("AvailableTimePeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AppointmentSpecialistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("AvailableTimePeriodId");

                    b.HasIndex("AppointmentSpecialistId");

                    b.ToTable("AvailableTimePeriod");
                });

            modelBuilder.Entity("task.shared.Appointment", b =>
                {
                    b.HasOne("task.shared.AppointmentSpecialist", "Specialist")
                        .WithMany("Appointments")
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("task.shared.AvailableTimePeriod", b =>
                {
                    b.HasOne("task.shared.AppointmentSpecialist", null)
                        .WithMany("AvailableTimePeriods")
                        .HasForeignKey("AppointmentSpecialistId");
                });

            modelBuilder.Entity("task.shared.AppointmentSpecialist", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("AvailableTimePeriods");
                });
#pragma warning restore 612, 618
        }
    }
}
